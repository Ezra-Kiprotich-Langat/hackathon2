[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "skillscore-api"
version = "1.0.0"
description = "Helper service for text extraction, AI orchestration, and Gemini communication"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    { name = "SkillScore Team" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    # FastAPI and server dependencies
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "python-multipart>=0.0.6",
    
    # Authentication and security
    "PyJWT>=2.8.0",
    "cryptography>=41.0.7",
    
    # Database and storage
    "supabase>=2.0.2",
    "postgrest>=0.13.0",
    
    # Google AI
    "google-generativeai>=0.3.2",
    
    # File processing
    "PyPDF2>=3.0.1",
    "python-docx>=1.1.0",
    "Pillow>=10.1.0",
    "pytesseract>=0.3.10",
    
    # Configuration and environment
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "python-dotenv>=1.0.0",
    
    # HTTP client
    "httpx>=0.25.2",
    "aiofiles>=23.2.1",
    
    # Utilities
    "python-magic>=0.4.27",
    "chardet>=5.2.0",
    
    # Logging and monitoring
    "structlog>=23.2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.7.0",
]

[project.urls]
Homepage = "https://github.com/skillscore/api"
Repository = "https://github.com/skillscore/api.git"
Issues = "https://github.com/skillscore/api/issues"

[project.scripts]
skillscore-api = "main:app"

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.7.0",
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
asyncio_mode = "auto"